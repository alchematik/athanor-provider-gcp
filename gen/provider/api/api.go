// Code generated by athanor-go.
// DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type Api struct {
	Identifier identifier.ApiIdentifier
	Config     Config
	Attrs      Attrs
}

func (x Api) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type ApiGetter interface {
	GetApi(context.Context, identifier.ApiIdentifier) (Api, error)
}

type ApiCreator interface {
	CreateApi(context.Context, identifier.ApiIdentifier, Config) (Api, error)
}

type ApiUpdator interface {
	UpdateApi(context.Context, identifier.ApiIdentifier, Config, []sdk.UpdateMaskField) (Api, error)
}

type ApiDeleter interface {
	DeleteApi(context.Context, identifier.ApiIdentifier) error
}

type ApiHandler struct {
	ApiGetter  ApiGetter
	ApiCreator ApiCreator
	ApiUpdator ApiUpdator
	ApiDeleter ApiDeleter

	CloseFunc func() error
}

func (h *ApiHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.ApiGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseApiIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ApiGetter.GetApi(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ApiHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.ApiCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseApiIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ApiCreator.CreateApi(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ApiHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.ApiUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseApiIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ApiUpdator.UpdateApi(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ApiHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.ApiDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseApiIdentifier(id)
	if err != nil {
		return err
	}

	return h.ApiDeleter.DeleteApi(ctx, idVal)
}

func (h *ApiHandler) Close() error {
	if h.CloseFunc != nil {
		return h.CloseFunc()
	}

	return nil
}

type Attrs struct {
	Create string
	State  string
	Update string
}

func (x Attrs) ToValue() any {
	return map[string]any{
		"create": sdk.ToType[any](x.Create),
		"state":  sdk.ToType[any](x.State),
		"update": sdk.ToType[any](x.Update),
	}
}

func ParseAttrs(v any) (Attrs, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs: %v", err)
	}

	create, err := sdk.String(m["create"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for api: %v", err)
	}
	state, err := sdk.String(m["state"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for api: %v", err)
	}
	update, err := sdk.String(m["update"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for api: %v", err)
	}

	return Attrs{
		Create: create,
		State:  state,
		Update: update,
	}, nil
}

type Config struct {
	DisplayName string
	Labels      map[string]string
}

func (x Config) ToValue() any {
	return map[string]any{
		"display_name": sdk.ToType[any](x.DisplayName),
		"labels":       sdk.ToType[string](x.Labels),
	}
}

func ParseConfig(v any) (Config, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config: %v", err)
	}

	display_name, err := sdk.String(m["display_name"])
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config for api: %v", err)
	}
	labels, err := sdk.Map[string](m["labels"])
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config for api: %v", err)
	}

	return Config{
		DisplayName: display_name,
		Labels:      labels,
	}, nil
}
