// Code generated by athanor-go.
// DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
)

type Bucket struct {
	Identifier BucketIdentifier
	Config     BucketConfig
	Attrs      BucketAttrs
}

func (x Bucket) ToResourceValue() (sdk.Resource, error) {
	id, err := x.Identifier.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	config, err := x.Config.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	attrs, err := x.Attrs.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type BucketGetter interface {
	GetBucket(context.Context, BucketIdentifier) (Bucket, error)
}

type BucketCreator interface {
	CreateBucket(context.Context, BucketIdentifier, BucketConfig) (Bucket, error)
}

type BucketUpdator interface {
	UpdateBucket(context.Context, BucketIdentifier, BucketConfig) (Bucket, error)
}

type BucketDeleter interface {
	DeleteBucket(context.Context, BucketIdentifier) error
}

type BucketHandler struct {
	BucketGetter  BucketGetter
	BucketCreator BucketCreator
	BucketUpdator BucketUpdator
	BucketDeleter BucketDeleter
}

func (h BucketHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.BucketGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id.Value)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketGetter.GetBucket(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id.Value)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketCreator.CreateBucket(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id.Value)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketUpdator.UpdateBucket(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.BucketDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketIdentifier(id.Value)
	if err != nil {
		return err
	}

	return h.BucketDeleter.DeleteBucket(ctx, idVal)
}

type BucketAttrs struct {
	Created string
}

func (x BucketAttrs) ToValue() (any, error) {
	return map[string]any{
		"created": x.Created,
	}, nil
}

func ParseBucketAttrs(v any) (BucketAttrs, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketAttrs{}, nil
	}

	created, err := sdk.String(m["created"])
	if err != nil {
		return BucketAttrs{}, nil
	}

	return BucketAttrs{
		Created: created,
	}, nil
}

type BucketConfig struct {
	Labels map[string]any
}

func (x BucketConfig) ToValue() (any, error) {
	return map[string]any{
		"labels": x.Labels,
	}, nil
}

func ParseBucketConfig(v any) (BucketConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketConfig{}, nil
	}

	labels, err := sdk.Map(m["labels"])
	if err != nil {
		return BucketConfig{}, nil
	}

	return BucketConfig{
		Labels: labels,
	}, nil
}

type BucketIdentifier struct {
	Project  string
	Location string
	Name     string
}

func (x BucketIdentifier) ToValue() (any, error) {
	return sdk.Identifier{
		ResourceType: "bucket",
		Value: map[string]any{
			"project":  x.Project,
			"location": x.Location,
			"name":     x.Name,
		},
	}, nil
}

func (x BucketIdentifier) ResourceType() string {
	return "bucket"
}

func ParseBucketIdentifier(v any) (BucketIdentifier, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketIdentifier{}, nil
	}

	project, err := sdk.String(m["project"])
	if err != nil {
		return BucketIdentifier{}, nil
	}
	location, err := sdk.String(m["location"])
	if err != nil {
		return BucketIdentifier{}, nil
	}
	name, err := sdk.String(m["name"])
	if err != nil {
		return BucketIdentifier{}, nil
	}

	return BucketIdentifier{
		Project:  project,
		Location: location,
		Name:     name,
	}, nil
}
