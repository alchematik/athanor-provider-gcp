// Code generated by athanor-go.
// DO NOT EDIT.

package bucket_object

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type BucketObject struct {
	Identifier identifier.BucketObjectIdentifier
	Config     BucketObjectConfig
	Attrs      BucketObjectAttrs
}

func (x BucketObject) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type BucketObjectGetter interface {
	GetBucketObject(context.Context, identifier.BucketObjectIdentifier) (BucketObject, error)
}

type BucketObjectCreator interface {
	CreateBucketObject(context.Context, identifier.BucketObjectIdentifier, BucketObjectConfig) (BucketObject, error)
}

type BucketObjectUpdator interface {
	UpdateBucketObject(context.Context, identifier.BucketObjectIdentifier, BucketObjectConfig, []sdk.UpdateMaskField) (BucketObject, error)
}

type BucketObjectDeleter interface {
	DeleteBucketObject(context.Context, identifier.BucketObjectIdentifier) error
}

type BucketObjectHandler struct {
	BucketObjectGetter  BucketObjectGetter
	BucketObjectCreator BucketObjectCreator
	BucketObjectUpdator BucketObjectUpdator
	BucketObjectDeleter BucketObjectDeleter
}

func (h BucketObjectHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.BucketObjectGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectGetter.GetBucketObject(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketObjectCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketObjectConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectCreator.CreateBucketObject(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.BucketObjectUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketObjectConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectUpdator.UpdateBucketObject(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.BucketObjectDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return err
	}

	return h.BucketObjectDeleter.DeleteBucketObject(ctx, idVal)
}

type BucketObjectAttrs struct {
	Created string
}

func (x BucketObjectAttrs) ToValue() any {
	return map[string]any{
		"created": sdk.ToType(x.Created),
	}
}

func ParseBucketObjectAttrs(v any) (BucketObjectAttrs, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketObjectAttrs{}, nil
	}

	created, err := sdk.String(m["created"])
	if err != nil {
		return BucketObjectAttrs{}, nil
	}

	return BucketObjectAttrs{
		Created: created,
	}, nil
}

type BucketObjectConfig struct {
	Contents sdk.File
}

func (x BucketObjectConfig) ToValue() any {
	return map[string]any{
		"contents": sdk.ToType(x.Contents),
	}
}

func ParseBucketObjectConfig(v any) (BucketObjectConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketObjectConfig{}, nil
	}

	contents, err := sdk.ParseFile(m["contents"])
	if err != nil {
		return BucketObjectConfig{}, nil
	}

	return BucketObjectConfig{
		Contents: contents,
	}, nil
}
