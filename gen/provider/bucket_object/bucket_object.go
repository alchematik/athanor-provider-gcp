// Code generated by athanor-go.
// DO NOT EDIT.

package bucket_object

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type BucketObject struct {
	Identifier identifier.BucketObjectIdentifier
	Config     Config
	Attrs      Attrs
}

func (x BucketObject) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type BucketObjectGetter interface {
	GetBucketObject(context.Context, identifier.BucketObjectIdentifier) (BucketObject, error)
}

type BucketObjectCreator interface {
	CreateBucketObject(context.Context, identifier.BucketObjectIdentifier, Config) (BucketObject, error)
}

type BucketObjectUpdator interface {
	UpdateBucketObject(context.Context, identifier.BucketObjectIdentifier, Config, []sdk.UpdateMaskField) (BucketObject, error)
}

type BucketObjectDeleter interface {
	DeleteBucketObject(context.Context, identifier.BucketObjectIdentifier) error
}

type BucketObjectHandler struct {
	BucketObjectGetter  BucketObjectGetter
	BucketObjectCreator BucketObjectCreator
	BucketObjectUpdator BucketObjectUpdator
	BucketObjectDeleter BucketObjectDeleter

	CloseFunc func() error
}

func (h *BucketObjectHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.BucketObjectGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectGetter.GetBucketObject(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *BucketObjectHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketObjectCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectCreator.CreateBucketObject(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *BucketObjectHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.BucketObjectUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectUpdator.UpdateBucketObject(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *BucketObjectHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.BucketObjectDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseBucketObjectIdentifier(id)
	if err != nil {
		return err
	}

	return h.BucketObjectDeleter.DeleteBucketObject(ctx, idVal)
}

func (h *BucketObjectHandler) Close() error {
	if h.CloseFunc != nil {
		return h.CloseFunc()
	}

	return nil
}

type Attrs struct {
	Create string
}

func (x Attrs) ToValue() any {
	return map[string]any{
		"create": sdk.ToType[any](x.Create),
	}
}

func ParseAttrs(v any) (Attrs, error) {

	m, err := sdk.Map[any](v)
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs: %v", err)
	}

	create, err := sdk.String(m["create"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for bucket_object: %v", err)
	}

	return Attrs{
		Create: create,
	}, nil
}

type Config struct {
	Contents sdk.File
}

func (x Config) ToValue() any {
	return map[string]any{
		"contents": sdk.ToType[any](x.Contents),
	}
}

func ParseConfig(v any) (Config, error) {

	m, err := sdk.Map[any](v)
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config: %v", err)
	}

	contents, err := sdk.ParseFile(m["contents"])
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config for bucket_object: %v", err)
	}

	return Config{
		Contents: contents,
	}, nil
}
