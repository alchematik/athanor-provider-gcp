// Code generated by athanor-go.
// DO NOT EDIT.

package bucket_object

import (
	"context"
	"fmt"

	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
)

type BucketObject struct {
	Identifier BucketObjectIdentifier
	Config     BucketObjectConfig
	Attrs      BucketObjectAttrs
}

func (x BucketObject) ToResourceValue() (sdk.Resource, error) {
	id, err := x.Identifier.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	config, err := x.Config.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	attrs, err := x.Attrs.ToValue()
	if err != nil {
		return sdk.Resource{}, nil
	}

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type BucketObjectGetter interface {
	GetBucketObject(context.Context, BucketObjectIdentifier) (BucketObject, error)
}

type BucketObjectCreator interface {
	CreateBucketObject(context.Context, BucketObjectIdentifier, BucketObjectConfig) (BucketObject, error)
}

type BucketObjectUpdator interface {
	UpdateBucketObject(context.Context, BucketObjectIdentifier, BucketObjectConfig, []sdk.UpdateMaskField) (BucketObject, error)
}

type BucketObjectDeleter interface {
	DeleteBucketObject(context.Context, BucketObjectIdentifier) error
}

type BucketObjectHandler struct {
	BucketObjectGetter  BucketObjectGetter
	BucketObjectCreator BucketObjectCreator
	BucketObjectUpdator BucketObjectUpdator
	BucketObjectDeleter BucketObjectDeleter
}

func (h BucketObjectHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.BucketObjectGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectGetter.GetBucketObject(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.BucketObjectCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketObjectConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectCreator.CreateBucketObject(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.BucketObjectUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketObjectIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseBucketObjectConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.BucketObjectUpdator.UpdateBucketObject(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h BucketObjectHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.BucketObjectDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := ParseBucketObjectIdentifier(id)
	if err != nil {
		return err
	}

	return h.BucketObjectDeleter.DeleteBucketObject(ctx, idVal)
}

type BucketObjectAttrs struct {
	Created string
}

func (x BucketObjectAttrs) ToValue() (any, error) {
	return map[string]any{
		"created": x.Created,
	}, nil
}

func ParseBucketObjectAttrs(v any) (BucketObjectAttrs, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketObjectAttrs{}, nil
	}

	created, err := sdk.String(m["created"])
	if err != nil {
		return BucketObjectAttrs{}, nil
	}

	return BucketObjectAttrs{
		Created: created,
	}, nil
}

type BucketObjectConfig struct {
	Contents sdk.File
}

func (x BucketObjectConfig) ToValue() (any, error) {
	return map[string]any{
		"contents": x.Contents,
	}, nil
}

func ParseBucketObjectConfig(v any) (BucketObjectConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BucketObjectConfig{}, nil
	}

	contents, err := sdk.ParseFile(m["contents"])
	if err != nil {
		return BucketObjectConfig{}, nil
	}

	return BucketObjectConfig{
		Contents: contents,
	}, nil
}

type BucketObjectIdentifier struct {
	Bucket sdk.Identifier
	Name   string
}

func (x BucketObjectIdentifier) ToValue() (any, error) {
	return sdk.Identifier{
		ResourceType: "bucket_object",
		Value: map[string]any{
			"bucket": x.Bucket,
			"name":   x.Name,
		},
	}, nil
}

func (x BucketObjectIdentifier) ResourceType() string {
	return "bucket_object"
}

func ParseBucketObjectIdentifier(v sdk.Identifier) (BucketObjectIdentifier, error) {

	m, err := sdk.Map(v.Value)
	if err != nil {
		return BucketObjectIdentifier{}, nil
	}

	bucket, err := sdk.ParseIdentifier(m["bucket"])
	if err != nil {
		return BucketObjectIdentifier{}, nil
	}
	name, err := sdk.String(m["name"])
	if err != nil {
		return BucketObjectIdentifier{}, nil
	}

	return BucketObjectIdentifier{
		Bucket: bucket,
		Name:   name,
	}, nil
}
