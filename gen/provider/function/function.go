// Code generated by athanor-go.
// DO NOT EDIT.

package function

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type Function struct {
	Identifier identifier.FunctionIdentifier
	Config     FunctionConfig
	Attrs      FunctionAttrs
}

func (x Function) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type FunctionGetter interface {
	GetFunction(context.Context, identifier.FunctionIdentifier) (Function, error)
}

type FunctionCreator interface {
	CreateFunction(context.Context, identifier.FunctionIdentifier, FunctionConfig) (Function, error)
}

type FunctionUpdator interface {
	UpdateFunction(context.Context, identifier.FunctionIdentifier, FunctionConfig, []sdk.UpdateMaskField) (Function, error)
}

type FunctionDeleter interface {
	DeleteFunction(context.Context, identifier.FunctionIdentifier) error
}

type FunctionHandler struct {
	FunctionGetter  FunctionGetter
	FunctionCreator FunctionCreator
	FunctionUpdator FunctionUpdator
	FunctionDeleter FunctionDeleter
}

func (h FunctionHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.FunctionGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseFunctionIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.FunctionGetter.GetFunction(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h FunctionHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.FunctionCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseFunctionIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseFunctionConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.FunctionCreator.CreateFunction(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h FunctionHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.FunctionUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseFunctionIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseFunctionConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.FunctionUpdator.UpdateFunction(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h FunctionHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.FunctionDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseFunctionIdentifier(id)
	if err != nil {
		return err
	}

	return h.FunctionDeleter.DeleteFunction(ctx, idVal)
}

type BuildConfig struct {
	Runtime    string
	Entrypoint string
	Source     sdk.ResourceIdentifier
}

func (x BuildConfig) ToValue() any {
	return map[string]any{
		"runtime":    sdk.ToType(x.Runtime),
		"entrypoint": sdk.ToType(x.Entrypoint),
		"source":     sdk.ToType(x.Source),
	}
}

func ParseBuildConfig(v any) (BuildConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return BuildConfig{}, nil
	}

	runtime, err := sdk.String(m["runtime"])
	if err != nil {
		return BuildConfig{}, nil
	}
	entrypoint, err := sdk.String(m["entrypoint"])
	if err != nil {
		return BuildConfig{}, nil
	}
	source, err := identifier.ParseIdentifier(m["source"])
	if err != nil {
		return BuildConfig{}, nil
	}

	return BuildConfig{
		Runtime:    runtime,
		Entrypoint: entrypoint,
		Source:     source,
	}, nil
}

type FunctionAttrs struct {
	Url string
}

func (x FunctionAttrs) ToValue() any {
	return map[string]any{
		"url": sdk.ToType(x.Url),
	}
}

func ParseFunctionAttrs(v any) (FunctionAttrs, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return FunctionAttrs{}, nil
	}

	url, err := sdk.String(m["url"])
	if err != nil {
		return FunctionAttrs{}, nil
	}

	return FunctionAttrs{
		Url: url,
	}, nil
}

type FunctionConfig struct {
	Description string
	Labels      map[string]any
	BuildConfig BuildConfig
}

func (x FunctionConfig) ToValue() any {
	return map[string]any{
		"description":  sdk.ToType(x.Description),
		"labels":       sdk.ToType(x.Labels),
		"build_config": sdk.ToType(x.BuildConfig),
	}
}

func ParseFunctionConfig(v any) (FunctionConfig, error) {

	m, err := sdk.Map(v)
	if err != nil {
		return FunctionConfig{}, nil
	}

	description, err := sdk.String(m["description"])
	if err != nil {
		return FunctionConfig{}, nil
	}
	labels, err := sdk.Map(m["labels"])
	if err != nil {
		return FunctionConfig{}, nil
	}
	build_config, err := ParseBuildConfig(m["build_config"])
	if err != nil {
		return FunctionConfig{}, nil
	}

	return FunctionConfig{
		Description: description,
		Labels:      labels,
		BuildConfig: build_config,
	}, nil
}
