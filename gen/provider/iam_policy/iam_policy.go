// Code generated by athanor-go.
// DO NOT EDIT.

package iam_policy

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type IamPolicy struct {
	Identifier identifier.IamPolicyIdentifier
	Config     Config
	Attrs      Attrs
}

func (x IamPolicy) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type IamPolicyGetter interface {
	GetIamPolicy(context.Context, identifier.IamPolicyIdentifier) (IamPolicy, error)
}

type IamPolicyCreator interface {
	CreateIamPolicy(context.Context, identifier.IamPolicyIdentifier, Config) (IamPolicy, error)
}

type IamPolicyUpdator interface {
	UpdateIamPolicy(context.Context, identifier.IamPolicyIdentifier, Config, []sdk.UpdateMaskField) (IamPolicy, error)
}

type IamPolicyDeleter interface {
	DeleteIamPolicy(context.Context, identifier.IamPolicyIdentifier) error
}

type IamPolicyHandler struct {
	IamPolicyGetter  IamPolicyGetter
	IamPolicyCreator IamPolicyCreator
	IamPolicyUpdator IamPolicyUpdator
	IamPolicyDeleter IamPolicyDeleter

	CloseFunc func() error
}

func (h *IamPolicyHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.IamPolicyGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamPolicyIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamPolicyGetter.GetIamPolicy(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamPolicyHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.IamPolicyCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamPolicyIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamPolicyCreator.CreateIamPolicy(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamPolicyHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.IamPolicyUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamPolicyIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamPolicyUpdator.UpdateIamPolicy(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamPolicyHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.IamPolicyDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamPolicyIdentifier(id)
	if err != nil {
		return err
	}

	return h.IamPolicyDeleter.DeleteIamPolicy(ctx, idVal)
}

func (h *IamPolicyHandler) Close() error {
	if h.CloseFunc != nil {
		return h.CloseFunc()
	}

	return nil
}

type Attrs struct {
	Etag string
}

func (x Attrs) ToValue() any {
	return map[string]any{
		"etag": sdk.ToType[any](x.Etag),
	}
}

func ParseAttrs(v any) (Attrs, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs: %v", err)
	}

	etag, err := sdk.String(m["etag"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_policy: %v", err)
	}

	return Attrs{
		Etag: etag,
	}, nil
}

func ParseAttrsList(v any) ([]Attrs, error) {
	list, ok := v.([]any)
	if !ok {
		return nil, fmt.Errorf("invalid type for list: %T", v)
	}

	var vals []Attrs
	for _, val := range list {
		p, err := ParseAttrs(val)
		if err != nil {
			return nil, err
		}

		vals = append(vals, p)
	}

	return vals, nil
}

type Binding struct {
	Members []sdk.ResourceIdentifier
	Role    sdk.ResourceIdentifier
}

func (x Binding) ToValue() any {
	return map[string]any{
		"members": sdk.ToType[sdk.ResourceIdentifier](x.Members),
		"role":    sdk.ToType[any](x.Role),
	}
}

func ParseBinding(v any) (Binding, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Binding{}, fmt.Errorf("error parsing binding: %v", err)
	}

	members, err := identifier.ParseIdentifierList(m["members"])
	if err != nil {
		return Binding{}, fmt.Errorf("error parsing binding for iam_policy: %v", err)
	}
	role, err := identifier.ParseIdentifier(m["role"])
	if err != nil {
		return Binding{}, fmt.Errorf("error parsing binding for iam_policy: %v", err)
	}

	return Binding{
		Members: members,
		Role:    role,
	}, nil
}

func ParseBindingList(v any) ([]Binding, error) {
	list, ok := v.([]any)
	if !ok {
		return nil, fmt.Errorf("invalid type for list: %T", v)
	}

	var vals []Binding
	for _, val := range list {
		p, err := ParseBinding(val)
		if err != nil {
			return nil, err
		}

		vals = append(vals, p)
	}

	return vals, nil
}

type Config struct {
	Bindings []Binding
}

func (x Config) ToValue() any {
	return map[string]any{
		"bindings": sdk.ToType[Binding](x.Bindings),
	}
}

func ParseConfig(v any) (Config, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config: %v", err)
	}

	bindings, err := ParseBindingList(m["bindings"])
	if err != nil {
		return Config{}, fmt.Errorf("error parsing config for iam_policy: %v", err)
	}

	return Config{
		Bindings: bindings,
	}, nil
}

func ParseConfigList(v any) ([]Config, error) {
	list, ok := v.([]any)
	if !ok {
		return nil, fmt.Errorf("invalid type for list: %T", v)
	}

	var vals []Config
	for _, val := range list {
		p, err := ParseConfig(val)
		if err != nil {
			return nil, err
		}

		vals = append(vals, p)
	}

	return vals, nil
}
