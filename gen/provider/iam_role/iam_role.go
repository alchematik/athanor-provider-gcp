// Code generated by athanor-go.
// DO NOT EDIT.

package iam_role

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type IamRole struct {
	Identifier identifier.IamRoleIdentifier
	Config     Config
	Attrs      Attrs
}

func (x IamRole) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type IamRoleGetter interface {
	GetIamRole(context.Context, identifier.IamRoleIdentifier) (IamRole, error)
}

type IamRoleCreator interface {
	CreateIamRole(context.Context, identifier.IamRoleIdentifier, Config) (IamRole, error)
}

type IamRoleUpdator interface {
	UpdateIamRole(context.Context, identifier.IamRoleIdentifier, Config, []sdk.UpdateMaskField) (IamRole, error)
}

type IamRoleDeleter interface {
	DeleteIamRole(context.Context, identifier.IamRoleIdentifier) error
}

type IamRoleHandler struct {
	IamRoleGetter  IamRoleGetter
	IamRoleCreator IamRoleCreator
	IamRoleUpdator IamRoleUpdator
	IamRoleDeleter IamRoleDeleter

	CloseFunc func() error
}

func (h *IamRoleHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.IamRoleGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamRoleIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamRoleGetter.GetIamRole(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamRoleHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.IamRoleCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamRoleIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamRoleCreator.CreateIamRole(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamRoleHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.IamRoleUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamRoleIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.IamRoleUpdator.UpdateIamRole(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *IamRoleHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.IamRoleDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseIamRoleIdentifier(id)
	if err != nil {
		return err
	}

	return h.IamRoleDeleter.DeleteIamRole(ctx, idVal)
}

func (h *IamRoleHandler) Close() error {
	if h.CloseFunc != nil {
		return h.CloseFunc()
	}

	return nil
}

type Attrs struct {
	Description string
	Etag        string
	Permissions []string
	Stage       string
	Title       string
}

func (x Attrs) ToValue() any {
	return map[string]any{
		"description": sdk.ToType[any](x.Description),
		"etag":        sdk.ToType[any](x.Etag),
		"permissions": sdk.ToType[string](x.Permissions),
		"stage":       sdk.ToType[any](x.Stage),
		"title":       sdk.ToType[any](x.Title),
	}
}

func ParseAttrs(v any) (Attrs, error) {
	m, err := sdk.Map[any](v)
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs: %v", err)
	}

	description, err := sdk.String(m["description"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_role: %v", err)
	}
	etag, err := sdk.String(m["etag"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_role: %v", err)
	}
	permissions, err := sdk.List[string](m["permissions"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_role: %v", err)
	}
	stage, err := sdk.String(m["stage"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_role: %v", err)
	}
	title, err := sdk.String(m["title"])
	if err != nil {
		return Attrs{}, fmt.Errorf("error parsing attrs for iam_role: %v", err)
	}

	return Attrs{
		Description: description,
		Etag:        etag,
		Permissions: permissions,
		Stage:       stage,
		Title:       title,
	}, nil
}

func ParseAttrsList(v any) ([]Attrs, error) {
	list, ok := v.([]any)
	if !ok {
		return nil, fmt.Errorf("invalid type for list: %T", v)
	}

	var vals []Attrs
	for _, val := range list {
		p, err := ParseAttrs(val)
		if err != nil {
			return nil, err
		}

		vals = append(vals, p)
	}

	return vals, nil
}

type Config struct {
}

func (x Config) ToValue() any {
	return map[string]any{}
}

func ParseConfig(v any) (Config, error) {

	return Config{}, nil
}

func ParseConfigList(v any) ([]Config, error) {
	list, ok := v.([]any)
	if !ok {
		return nil, fmt.Errorf("invalid type for list: %T", v)
	}

	var vals []Config
	for _, val := range list {
		p, err := ParseConfig(val)
		if err != nil {
			return nil, err
		}

		vals = append(vals, p)
	}

	return vals, nil
}
