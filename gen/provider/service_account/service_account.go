// Code generated by athanor-go.
// DO NOT EDIT.

package service_account

import (
	"context"
	"fmt"
	sdk "github.com/alchematik/athanor-go/sdk/provider/value"
	"github.com/alchematik/athanor-provider-gcp/gen/provider/identifier"
)

type ServiceAccount struct {
	Identifier identifier.ServiceAccountIdentifier
	Config     Config
	Attrs      Attrs
}

func (x ServiceAccount) ToResourceValue() (sdk.Resource, error) {
	id := x.Identifier.ToValue()

	config := x.Config.ToValue()

	attrs := x.Attrs.ToValue()

	return sdk.Resource{
		Identifier: id,
		Config:     config,
		Attrs:      attrs,
	}, nil
}

type ServiceAccountGetter interface {
	GetServiceAccount(context.Context, identifier.ServiceAccountIdentifier) (ServiceAccount, error)
}

type ServiceAccountCreator interface {
	CreateServiceAccount(context.Context, identifier.ServiceAccountIdentifier, Config) (ServiceAccount, error)
}

type ServiceAccountUpdator interface {
	UpdateServiceAccount(context.Context, identifier.ServiceAccountIdentifier, Config, []sdk.UpdateMaskField) (ServiceAccount, error)
}

type ServiceAccountDeleter interface {
	DeleteServiceAccount(context.Context, identifier.ServiceAccountIdentifier) error
}

type ServiceAccountHandler struct {
	ServiceAccountGetter  ServiceAccountGetter
	ServiceAccountCreator ServiceAccountCreator
	ServiceAccountUpdator ServiceAccountUpdator
	ServiceAccountDeleter ServiceAccountDeleter

	CloseFunc func() error
}

func (h *ServiceAccountHandler) GetResource(ctx context.Context, id sdk.Identifier) (sdk.Resource, error) {
	if h.ServiceAccountGetter == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseServiceAccountIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ServiceAccountGetter.GetServiceAccount(ctx, idVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ServiceAccountHandler) CreateResource(ctx context.Context, id sdk.Identifier, config any) (sdk.Resource, error) {
	if h.ServiceAccountCreator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseServiceAccountIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ServiceAccountCreator.CreateServiceAccount(ctx, idVal, configVal)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ServiceAccountHandler) UpdateResource(ctx context.Context, id sdk.Identifier, config any, mask []sdk.UpdateMaskField) (sdk.Resource, error) {
	if h.ServiceAccountUpdator == nil {
		return sdk.Resource{}, fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseServiceAccountIdentifier(id)
	if err != nil {
		return sdk.Resource{}, err
	}

	configVal, err := ParseConfig(config)
	if err != nil {
		return sdk.Resource{}, err
	}

	r, err := h.ServiceAccountUpdator.UpdateServiceAccount(ctx, idVal, configVal, mask)
	if err != nil {
		return sdk.Resource{}, err
	}

	return r.ToResourceValue()
}

func (h *ServiceAccountHandler) DeleteResource(ctx context.Context, id sdk.Identifier) error {
	if h.ServiceAccountDeleter == nil {
		return fmt.Errorf("unimplemented")
	}

	idVal, err := identifier.ParseServiceAccountIdentifier(id)
	if err != nil {
		return err
	}

	return h.ServiceAccountDeleter.DeleteServiceAccount(ctx, idVal)
}

func (h *ServiceAccountHandler) Close() error {
	if h.CloseFunc != nil {
		return h.CloseFunc()
	}

	return nil
}

type Attrs struct {
	Disabled bool
	UniqueId string
}

func (x Attrs) ToValue() any {
	return map[string]any{
		"disabled":  sdk.ToType[any](x.Disabled),
		"unique_id": sdk.ToType[any](x.UniqueId),
	}
}

func ParseAttrs(v any) (Attrs, error) {

	m, err := sdk.Map[any](v)
	if err != nil {
		return Attrs{}, nil
	}

	disabled, err := sdk.Bool(m["disabled"])
	if err != nil {
		return Attrs{}, nil
	}
	unique_id, err := sdk.String(m["unique_id"])
	if err != nil {
		return Attrs{}, nil
	}

	return Attrs{
		Disabled: disabled,
		UniqueId: unique_id,
	}, nil
}

type Config struct {
	Description string
	DisplayName string
}

func (x Config) ToValue() any {
	return map[string]any{
		"description":  sdk.ToType[any](x.Description),
		"display_name": sdk.ToType[any](x.DisplayName),
	}
}

func ParseConfig(v any) (Config, error) {

	m, err := sdk.Map[any](v)
	if err != nil {
		return Config{}, nil
	}

	description, err := sdk.String(m["description"])
	if err != nil {
		return Config{}, nil
	}
	display_name, err := sdk.String(m["display_name"])
	if err != nil {
		return Config{}, nil
	}

	return Config{
		Description: description,
		DisplayName: display_name,
	}, nil
}
